# must have installed/downloaded:
# .sra sample file(s)
# whitelist file of desired barcodes
# gencode.v34
# cutadapt
# fastqc
# trimgalore
# cutadapt
# sed
# umi-tools
# HISAT2
# fastqc

# directories
# m_fastq
# misc
# extracted
# trimmed
# aligned
# quality

# Array of sample names (adjust as needed)
# samples=$(ls sra | gawk -F . '{print $1}')
samples=(
    "SRR12992072" "SRR12992073" "SRR12992074" "SRR12992075" "SRR12992076"
    "SRR12992077" "SRR12992078" "SRR12992079" "SRR12992080" "SRR12992081"
    "SRR12992082" "SRR12992083" "SRR12992084" "SRR12992085" "SRR12992086"
    "SRR12992087" "SRR12992088" "SRR12992089" "SRR12992090" "SRR12992091"
    "SRR12992092" "SRR12992093" "SRR12992094" "SRR12992095" "SRR12992096"
    "SRR12992097" "SRR12992098" "SRR12992099" "SRR12992100" "SRR12992101"
    "SRR12992102" "SRR12992103" "SRR12992104" "SRR12992105" "SRR12992106"
    "SRR12992107" "SRR12992108" "SRR12992109" "SRR12992110" "SRR12992111"
    "SRR12992112" "SRR12992113" "SRR12992114" "SRR12992115" "SRR12992116"
    "SRR12992117" "SRR12992118" "SRR12992119" "SRR12992120" "SRR12992121"
    "SRR12992122" "SRR12992123" "SRR12992124" "SRR12992125" "SRR12992126"
    "SRR12992127" "SRR12992128" "SRR12992129" "SRR12992130" "SRR12992131"
    "SRR12992132" "SRR12992133" "SRR12992134" "SRR12992135" "SRR12992136"
    "SRR12992137" "SRR12992138" "SRR12992139" "SRR12992140" "SRR12992141"
    "SRR12992142" "SRR12992143" "SRR12992144" "SRR12992145" "SRR12992146"
    "SRR17383706" "SRR17383723" "SRR17383724" "SRR17383725" "SRR17383726"
    "SRR17383727" "SRR17383728" "SRR17383729" "SRR17383730" "SRR17383731"
    "SRR17383732" "SRR17383733" "SRR17383734" "SRR17383735" "SRR17383736"
    "SRR17383737" "SRR17383738" "SRR17383755" "SRR17383756" "SRR17383757"
)

# Loop through samples and submit jobs to HPC
for sample in "${samples[@]}"; do
â€‹
# Define input and output paths
input_R1="${sample}_pass_1.fastq"
input_R2="${sample}_pass_2.fastq"
whitelist="${sample}.txt"

# Submit job to HPC cluster for this sample
sbatch --ntasks=1 --job-name="$sample" --mem=8gb --time=1:00:00 --wrap="

    # edit file (read headers) to work with umi-tools
    # replace .1 or .2 with /1 or /2, save original file as file.bak
   # sed -E -e '/^[+@]SRR/ s/([.])([12])(\s)/\/\2\3/g' fastq/${input_R1} > m_fastq/${input_R1}
   # sed -E -e '/^[+@]SRR/ s/([.])([12])(\s)/\/\2\3/g' fastq/${input_R2} > m_fastq/${input_R2}
    # concatenate UMIs and barcodes to the read headers in the cDNA reads file
    # read 1 and 2 are reversed since for most people read 1 has the cDNA, but for us that is in read2
    # R2_extracted is a file that holds the remainder of the UMI/barcode file and is just for quality control (checking umi-tools)
    umi_tools extract \
        --ignore-read-pair-suffixes \
        --bc-pattern=CCCCCCCNNNNNNNN \
        --stdin m_fastq/${input_R2} \
        --stdout misc/${sample}_leftover.fastq.gz \
        --read2-in  m_fastq/${input_R1} \
        --read2-out=extracted/${sample}_extracted.fastq.gz \
        --whitelist=PIC/data/PICseq_metadata/${sample}.txt \

    # Run Trim Galore! for quality trimming and adapter removal
    software/TrimGalore-0.6.10/trim_galore --quality 20 --stringency 3 --output_dir trimmed extracted/${sample}_extracted.fastq.gz;

    # Perform alignment using HISAT2
    hisat2 -x hg38_index -U trimmed/${sample}_extracted_trimmed.fq.gz -S aligned/${sample}_aligned.sam

    # quality check
    fastqc aligned/${sample}_aligned.sam -o quality
"
done
